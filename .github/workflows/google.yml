# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches:
      - master
  release:
    types: [created]

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: asia-southeast1-a
  GKE_CLUSTER: red-ranger
  IMAGE: spring-boot-kotlin-hello-world
  REGISTRY_HOSTNAME: asia.gcr.io
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  HARBOR_USERNAME: ${{ secrets.HARBOR_USERNAME }}
  HARBOR_PASSWORD: ${{ secrets.HARBOR_PASSWORD }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Java JDK
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.GKE_EMAIL }}
        service_account_key: ${{ secrets.GKE_KEY }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker

    - name: Unit test
      run: mvn -B test
    
    - name: SonarCloud Scan
      run: mvn -B verify sonar:sonar -Dsonar.projectKey=spring-boot-kotlin-hello-world -Dsonar.organization=wl-demo -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN

    - name: Build and Push Image
      run: |        
        mvn -B compile jib:build

    - name: Helm tool installer
      uses: Azure/setup-helm@v1

    - name: Set up Helm
      run: |
        helm repo add --username=$HELM_USERNAME --password=$HELM_PASSWORD library http://34.87.54.235:80/chartrepo/library

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        helm upgrade -i demo library/sample --set image.repository=asia.gcr.io/acn-ies-gcp/spring-boot-kotlin-hello-world,image.tag=0.0.1-SNAPSHOT,env[0].name=HELLO_NAME,env[0].value=SUCCESS,env[1].name=MY_POD_IP,env[1].valueFrom.fieldRef.fieldPath=status.podIP
        kubectl get services -o wide
